/* tslint:disable */
/* eslint-disable */
/**
 * ACMIN API
 * ACMIN API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: xulingming@xao.ac.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiHTTPError
 */
export interface ApiHTTPError {
    /**
     * 
     * @type {object}
     * @memberof ApiHTTPError
     */
    'data'?: object;
    /**
     * 
     * @type {number}
     * @memberof ApiHTTPError
     */
    'error'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiHTTPError
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiHTTPError
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {object}
     * @memberof ApiResponse
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface ModelsAddApplicationForm
 */
export interface ModelsAddApplicationForm {
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'client_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'client_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddApplicationForm
     */
    'redirect_uri'?: string;
}
/**
 * 
 * @export
 * @interface ModelsAddRoleForm
 */
export interface ModelsAddRoleForm {
    /**
     * 
     * @type {string}
     * @memberof ModelsAddRoleForm
     */
    'app_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddRoleForm
     */
    'id'?: string;
    /**
     * 
     * @type {Array<ModelsRoleMenu>}
     * @memberof ModelsAddRoleForm
     */
    'menus'?: Array<ModelsRoleMenu>;
    /**
     * 
     * @type {string}
     * @memberof ModelsAddRoleForm
     */
    'name'?: string;
    /**
     * 0: disabled 1: enabled
     * @type {string}
     * @memberof ModelsAddRoleForm
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface ModelsApplication
 */
export interface ModelsApplication {
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'client_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'client_secret'?: string;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsApplication
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'id'?: string;
    /**
     * 
     * @type {object}
     * @memberof ModelsApplication
     */
    'menus'?: object;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsApplication
     */
    'redirect_uri'?: string;
    /**
     * 
     * @type {Array<ModelsRole>}
     * @memberof ModelsApplication
     */
    'roles'?: Array<ModelsRole>;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsApplication
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ModelsLoginForm
 */
export interface ModelsLoginForm {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsLoginForm
     */
    'ignoreSyncCasbin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginForm
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginForm
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginForm
     */
    'verify_code'?: string;
}
/**
 * 
 * @export
 * @interface ModelsMenu
 */
export interface ModelsMenu {
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'app_id'?: string;
    /**
     * sub level menus
     * @type {Array<ModelsMenu>}
     * @memberof ModelsMenu
     */
    'children'?: Array<ModelsMenu>;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'code'?: string;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsMenu
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'name'?: string;
    /**
     * parent id
     * @type {string}
     * @memberof ModelsMenu
     */
    'parent'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'parent_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenu
     */
    'path'?: string;
    /**
     * 
     * @type {Array<ModelsResource>}
     * @memberof ModelsMenu
     */
    'resources'?: Array<ModelsResource>;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsMenu
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ModelsMenuForm
 */
export interface ModelsMenuForm {
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'app_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'parent_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'parent_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsMenuForm
     */
    'path'?: string;
    /**
     * 
     * @type {Array<ModelsResource>}
     * @memberof ModelsMenuForm
     */
    'resources'?: Array<ModelsResource>;
}
/**
 * 
 * @export
 * @interface ModelsResource
 */
export interface ModelsResource {
    /**
     * 
     * @type {string}
     * @memberof ModelsResource
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsResource
     */
    'method'?: string;
    /**
     * From Menu.ID
     * @type {string}
     * @memberof ModelsResource
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsResource
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface ModelsRole
 */
export interface ModelsRole {
    /**
     * From Application.ID
     * @type {string}
     * @memberof ModelsRole
     */
    'app_id'?: string;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsRole
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRole
     */
    'id'?: string;
    /**
     * 
     * @type {object}
     * @memberof ModelsRole
     */
    'menus'?: object;
    /**
     * 
     * @type {string}
     * @memberof ModelsRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRole
     */
    'status'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsRole
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ModelsRoleMenu
 */
export interface ModelsRoleMenu {
    /**
     * Create time
     * @type {string}
     * @memberof ModelsRoleMenu
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRoleMenu
     */
    'id'?: string;
    /**
     * 
     * @type {ModelsMenu}
     * @memberof ModelsRoleMenu
     */
    'menu'?: ModelsMenu;
    /**
     * 
     * @type {string}
     * @memberof ModelsRoleMenu
     */
    'menu_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRoleMenu
     */
    'role_id'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsRoleMenu
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * Apps of user
     * @type {Array<ModelsUserApp>}
     * @memberof ModelsUser
     */
    'apps'?: Array<ModelsUserApp>;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsUser
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelsUser
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'phone'?: string;
    /**
     * Roles of user
     * @type {Array<ModelsUserRole>}
     * @memberof ModelsUser
     */
    'roles'?: Array<ModelsUserRole>;
    /**
     * From Application.ID
     * @type {string}
     * @memberof ModelsUser
     */
    'signup_app'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'status'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsUser
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUserApp
 */
export interface ModelsUserApp {
    /**
     * 
     * @type {string}
     * @memberof ModelsUserApp
     */
    'app_id'?: string;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsUserApp
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserApp
     */
    'id'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsUserApp
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserApp
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUserForm
 */
export interface ModelsUserForm {
    /**
     * 
     * @type {Array<ModelsUserApp>}
     * @memberof ModelsUserForm
     */
    'apps'?: Array<ModelsUserApp>;
    /**
     * Email of user
     * @type {string}
     * @memberof ModelsUserForm
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserForm
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUserForm
     */
    'ignoreSyncCasbin'?: boolean;
    /**
     * Name of user
     * @type {string}
     * @memberof ModelsUserForm
     */
    'name': string;
    /**
     * Password for login (md5 hash)
     * @type {string}
     * @memberof ModelsUserForm
     */
    'password'?: string;
    /**
     * Phone number of user
     * @type {string}
     * @memberof ModelsUserForm
     */
    'phone'?: string;
    /**
     * 
     * @type {Array<ModelsUserRole>}
     * @memberof ModelsUserForm
     */
    'roles': Array<ModelsUserRole>;
    /**
     * Status of user (activated, freezed)
     * @type {string}
     * @memberof ModelsUserForm
     */
    'status': ModelsUserFormStatusEnum;
    /**
     * Username for login
     * @type {string}
     * @memberof ModelsUserForm
     */
    'username': string;
}

export const ModelsUserFormStatusEnum = {
    Activated: 'activated',
    Freezed: 'freezed'
} as const;

export type ModelsUserFormStatusEnum = typeof ModelsUserFormStatusEnum[keyof typeof ModelsUserFormStatusEnum];

/**
 * 
 * @export
 * @interface ModelsUserRole
 */
export interface ModelsUserRole {
    /**
     * From Application.ID
     * @type {string}
     * @memberof ModelsUserRole
     */
    'app_id'?: string;
    /**
     * Create time
     * @type {string}
     * @memberof ModelsUserRole
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRole
     */
    'id'?: string;
    /**
     * 
     * @type {ModelsRole}
     * @memberof ModelsUserRole
     */
    'role'?: ModelsRole;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRole
     */
    'role_id'?: string;
    /**
     * Update time
     * @type {string}
     * @memberof ModelsUserRole
     */
    'updated_at'?: string;
    /**
     * From User.ID
     * @type {string}
     * @memberof ModelsUserRole
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface V1AppsIdGet200Response
 */
export interface V1AppsIdGet200Response {
    /**
     * 
     * @type {ModelsApplication}
     * @memberof V1AppsIdGet200Response
     */
    'data'?: ModelsApplication;
    /**
     * 
     * @type {string}
     * @memberof V1AppsIdGet200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1AppsIdGet200Response
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface V1AppsPost200Response
 */
export interface V1AppsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1AppsPost200Response
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AppsPost200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1AppsPost200Response
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface V1CurrentMeGet200Response
 */
export interface V1CurrentMeGet200Response {
    /**
     * 
     * @type {ModelsUser}
     * @memberof V1CurrentMeGet200Response
     */
    'data'?: ModelsUser;
    /**
     * 
     * @type {string}
     * @memberof V1CurrentMeGet200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1CurrentMeGet200Response
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface V1CurrentMenusGet200Response
 */
export interface V1CurrentMenusGet200Response {
    /**
     * 
     * @type {Array<ModelsMenu>}
     * @memberof V1CurrentMenusGet200Response
     */
    'data'?: Array<ModelsMenu>;
    /**
     * 
     * @type {string}
     * @memberof V1CurrentMenusGet200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1CurrentMenusGet200Response
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface V1MenusIdGet200Response
 */
export interface V1MenusIdGet200Response {
    /**
     * 
     * @type {ModelsMenu}
     * @memberof V1MenusIdGet200Response
     */
    'data'?: ModelsMenu;
    /**
     * 
     * @type {string}
     * @memberof V1MenusIdGet200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1MenusIdGet200Response
     */
    'status'?: number;
}
/**
 * 
 * @export
 * @interface V1RolesIdGet200Response
 */
export interface V1RolesIdGet200Response {
    /**
     * 
     * @type {ModelsRole}
     * @memberof V1RolesIdGet200Response
     */
    'data'?: ModelsRole;
    /**
     * 
     * @type {string}
     * @memberof V1RolesIdGet200Response
     */
    'msg'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1RolesIdGet200Response
     */
    'status'?: number;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get current login user info
         * @summary 获取当前登录用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CurrentMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/current/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get current user menus
         * @summary 获取当前登录用户菜单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CurrentMenusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/current/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * login
         * @summary 登录
         * @param {ModelsLoginForm} form login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost: async (form: ModelsLoginForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1LoginPost', 'form', form)
            const localVarPath = `/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * logout
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create an user account
         * @summary 新增用户
         * @param {ModelsUserForm} form create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersAddPost: async (form: ModelsUserForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1UsersAddPost', 'form', form)
            const localVarPath = `/v1/users/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get paginated users
         * @summary 分页查询用户
         * @param {number} id User ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet: async (id: number, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersGet', 'id', id)
            const localVarPath = `/v1/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete user
         * @summary 删除用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersIdDelete', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * query user
         * @summary 查询用户
         * @param {number} id User ID
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdGet: async (id: number, includeResources?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersIdGet', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeResources !== undefined) {
                localVarQueryParameter['include_resources'] = includeResources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update user
         * @summary 更新用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdPut: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersIdPut', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * get current login user info
         * @summary 获取当前登录用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CurrentMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CurrentMeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CurrentMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1CurrentMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get current user menus
         * @summary 获取当前登录用户菜单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CurrentMenusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CurrentMenusGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CurrentMenusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1CurrentMenusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * login
         * @summary 登录
         * @param {ModelsLoginForm} form login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LoginPost(form: ModelsLoginForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LoginPost(form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1LoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * logout
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1LogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create an user account
         * @summary 新增用户
         * @param {ModelsUserForm} form create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersAddPost(form: ModelsUserForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CurrentMeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAddPost(form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1UsersAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get paginated users
         * @summary 分页查询用户
         * @param {number} id User ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersGet(id: number, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersGet(id, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete user
         * @summary 删除用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1UsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * query user
         * @summary 查询用户
         * @param {number} id User ID
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersIdGet(id: number, includeResources?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CurrentMeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIdGet(id, includeResources, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1UsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update user
         * @summary 更新用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersIdPut(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIdPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.v1UsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * get current login user info
         * @summary 获取当前登录用户
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CurrentMeGet(options?: any): AxiosPromise<V1CurrentMeGet200Response> {
            return localVarFp.v1CurrentMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get current user menus
         * @summary 获取当前登录用户菜单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CurrentMenusGet(options?: any): AxiosPromise<V1CurrentMenusGet200Response> {
            return localVarFp.v1CurrentMenusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * login
         * @summary 登录
         * @param {ModelsLoginForm} form login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost(form: ModelsLoginForm, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1LoginPost(form, options).then((request) => request(axios, basePath));
        },
        /**
         * logout
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LogoutPost(options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1LogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * create an user account
         * @summary 新增用户
         * @param {ModelsUserForm} form create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersAddPost(form: ModelsUserForm, options?: any): AxiosPromise<V1CurrentMeGet200Response> {
            return localVarFp.v1UsersAddPost(form, options).then((request) => request(axios, basePath));
        },
        /**
         * get paginated users
         * @summary 分页查询用户
         * @param {number} id User ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet(id: number, page?: number, size?: number, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1UsersGet(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * delete user
         * @summary 删除用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdDelete(id: number, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1UsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * query user
         * @summary 查询用户
         * @param {number} id User ID
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdGet(id: number, includeResources?: boolean, options?: any): AxiosPromise<V1CurrentMeGet200Response> {
            return localVarFp.v1UsersIdGet(id, includeResources, options).then((request) => request(axios, basePath));
        },
        /**
         * update user
         * @summary 更新用户
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdPut(id: number, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1UsersIdPut(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * get current login user info
     * @summary 获取当前登录用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1CurrentMeGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1CurrentMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get current user menus
     * @summary 获取当前登录用户菜单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1CurrentMenusGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1CurrentMenusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * login
     * @summary 登录
     * @param {ModelsLoginForm} form login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1LoginPost(form: ModelsLoginForm, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1LoginPost(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * logout
     * @summary 登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1LogoutPost(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1LogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create an user account
     * @summary 新增用户
     * @param {ModelsUserForm} form create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1UsersAddPost(form: ModelsUserForm, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1UsersAddPost(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get paginated users
     * @summary 分页查询用户
     * @param {number} id User ID
     * @param {number} [page] page for quering
     * @param {number} [size] page size for quering
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1UsersGet(id: number, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1UsersGet(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete user
     * @summary 删除用户
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1UsersIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1UsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * query user
     * @summary 查询用户
     * @param {number} id User ID
     * @param {boolean} [includeResources] Whether to include resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1UsersIdGet(id: number, includeResources?: boolean, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1UsersIdGet(id, includeResources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update user
     * @summary 更新用户
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public v1UsersIdPut(id: number, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).v1UsersIdPut(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get paginated apps
         * @summary 分页查询 APP
         * @param {string} id Application ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsGet: async (id: string, page?: number, size?: number, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AppsGet', 'id', id)
            const localVarPath = `/v1/apps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (includeRoles !== undefined) {
                localVarQueryParameter['include_roles'] = includeRoles;
            }

            if (includeMenus !== undefined) {
                localVarQueryParameter['include_menus'] = includeMenus;
            }

            if (includeResources !== undefined) {
                localVarQueryParameter['include_resources'] = includeResources;
            }

            if (menuTree !== undefined) {
                localVarQueryParameter['menu_tree'] = menuTree;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete app
         * @summary 删除应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AppsIdDelete', 'id', id)
            const localVarPath = `/v1/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * query app
         * @summary 查询APP(通过 ID)
         * @param {string} id Application ID
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdGet: async (id: string, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AppsIdGet', 'id', id)
            const localVarPath = `/v1/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeRoles !== undefined) {
                localVarQueryParameter['include_roles'] = includeRoles;
            }

            if (includeMenus !== undefined) {
                localVarQueryParameter['include_menus'] = includeMenus;
            }

            if (includeResources !== undefined) {
                localVarQueryParameter['include_resources'] = includeResources;
            }

            if (menuTree !== undefined) {
                localVarQueryParameter['menu_tree'] = menuTree;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update app
         * @summary 更新应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdPut: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AppsIdPut', 'id', id)
            const localVarPath = `/v1/apps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add app
         * @summary 新增应用
         * @param {ModelsAddApplicationForm} form create app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsPost: async (form: ModelsAddApplicationForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1AppsPost', 'form', form)
            const localVarPath = `/v1/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * get paginated apps
         * @summary 分页查询 APP
         * @param {string} id Application ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AppsGet(id: string, page?: number, size?: number, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AppsGet(id, page, size, includeRoles, includeMenus, includeResources, menuTree, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.v1AppsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete app
         * @summary 删除应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AppsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AppsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.v1AppsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * query app
         * @summary 查询APP(通过 ID)
         * @param {string} id Application ID
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AppsIdGet(id: string, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AppsIdGet(id, includeRoles, includeMenus, includeResources, menuTree, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.v1AppsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update app
         * @summary 更新应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AppsIdPut(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AppsIdPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.v1AppsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * add app
         * @summary 新增应用
         * @param {ModelsAddApplicationForm} form create app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AppsPost(form: ModelsAddApplicationForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AppsPost(form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationsApi.v1AppsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * get paginated apps
         * @summary 分页查询 APP
         * @param {string} id Application ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsGet(id: string, page?: number, size?: number, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1AppsGet(id, page, size, includeRoles, includeMenus, includeResources, menuTree, options).then((request) => request(axios, basePath));
        },
        /**
         * delete app
         * @summary 删除应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdDelete(id: string, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1AppsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * query app
         * @summary 查询APP(通过 ID)
         * @param {string} id Application ID
         * @param {boolean} [includeRoles] Whether to include roles
         * @param {boolean} [includeMenus] Whether to include menus
         * @param {boolean} [includeResources] Whether to include resources
         * @param {boolean} [menuTree] Whether to show menus using tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdGet(id: string, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: any): AxiosPromise<V1AppsIdGet200Response> {
            return localVarFp.v1AppsIdGet(id, includeRoles, includeMenus, includeResources, menuTree, options).then((request) => request(axios, basePath));
        },
        /**
         * update app
         * @summary 更新应用
         * @param {string} id Application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsIdPut(id: string, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1AppsIdPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * add app
         * @summary 新增应用
         * @param {ModelsAddApplicationForm} form create app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AppsPost(form: ModelsAddApplicationForm, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1AppsPost(form, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * get paginated apps
     * @summary 分页查询 APP
     * @param {string} id Application ID
     * @param {number} [page] page for quering
     * @param {number} [size] page size for quering
     * @param {boolean} [includeRoles] Whether to include roles
     * @param {boolean} [includeMenus] Whether to include menus
     * @param {boolean} [includeResources] Whether to include resources
     * @param {boolean} [menuTree] Whether to show menus using tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public v1AppsGet(id: string, page?: number, size?: number, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).v1AppsGet(id, page, size, includeRoles, includeMenus, includeResources, menuTree, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete app
     * @summary 删除应用
     * @param {string} id Application ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public v1AppsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).v1AppsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * query app
     * @summary 查询APP(通过 ID)
     * @param {string} id Application ID
     * @param {boolean} [includeRoles] Whether to include roles
     * @param {boolean} [includeMenus] Whether to include menus
     * @param {boolean} [includeResources] Whether to include resources
     * @param {boolean} [menuTree] Whether to show menus using tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public v1AppsIdGet(id: string, includeRoles?: boolean, includeMenus?: boolean, includeResources?: boolean, menuTree?: boolean, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).v1AppsIdGet(id, includeRoles, includeMenus, includeResources, menuTree, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update app
     * @summary 更新应用
     * @param {string} id Application ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public v1AppsIdPut(id: string, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).v1AppsIdPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add app
     * @summary 新增应用
     * @param {ModelsAddApplicationForm} form create app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public v1AppsPost(form: ModelsAddApplicationForm, options?: RawAxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).v1AppsPost(form, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MenusApi - axios parameter creator
 * @export
 */
export const MenusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get paginated menus
         * @param {number} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusGet: async (appId: number, page?: number, size?: number, includeResources?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('v1MenusGet', 'appId', appId)
            const localVarPath = `/v1/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            if (includeResources !== undefined) {
                localVarQueryParameter['include_resources'] = includeResources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1MenusIdDelete', 'id', id)
            const localVarPath = `/v1/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * query menu by id
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1MenusIdGet', 'id', id)
            const localVarPath = `/v1/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdPut: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1MenusIdPut', 'id', id)
            const localVarPath = `/v1/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add menu
         * @param {ModelsMenuForm} form create menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusPost: async (form: ModelsMenuForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1MenusPost', 'form', form)
            const localVarPath = `/v1/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenusApi - functional programming interface
 * @export
 */
export const MenusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenusApiAxiosParamCreator(configuration)
    return {
        /**
         * get paginated menus
         * @param {number} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MenusGet(appId: number, page?: number, size?: number, includeResources?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MenusGet(appId, page, size, includeResources, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.v1MenusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MenusIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MenusIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.v1MenusIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * query menu by id
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MenusIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1MenusIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MenusIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.v1MenusIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MenusIdPut(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MenusIdPut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.v1MenusIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * add menu
         * @param {ModelsMenuForm} form create menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MenusPost(form: ModelsMenuForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MenusPost(form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MenusApi.v1MenusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MenusApi - factory interface
 * @export
 */
export const MenusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenusApiFp(configuration)
    return {
        /**
         * get paginated menus
         * @param {number} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusGet(appId: number, page?: number, size?: number, includeResources?: boolean, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1MenusGet(appId, page, size, includeResources, options).then((request) => request(axios, basePath));
        },
        /**
         * delete menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdDelete(id: number, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1MenusIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * query menu by id
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdGet(id: number, options?: any): AxiosPromise<V1MenusIdGet200Response> {
            return localVarFp.v1MenusIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update menu
         * @param {number} id Menu ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusIdPut(id: number, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1MenusIdPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * add menu
         * @param {ModelsMenuForm} form create menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MenusPost(form: ModelsMenuForm, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1MenusPost(form, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export class MenusApi extends BaseAPI {
    /**
     * get paginated menus
     * @param {number} appId app ID
     * @param {number} [page] page for quering
     * @param {number} [size] page size for quering
     * @param {boolean} [includeResources] Whether to include resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public v1MenusGet(appId: number, page?: number, size?: number, includeResources?: boolean, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).v1MenusGet(appId, page, size, includeResources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete menu
     * @param {number} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public v1MenusIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).v1MenusIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * query menu by id
     * @param {number} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public v1MenusIdGet(id: number, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).v1MenusIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update menu
     * @param {number} id Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public v1MenusIdPut(id: number, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).v1MenusIdPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add menu
     * @param {ModelsMenuForm} form create menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    public v1MenusPost(form: ModelsMenuForm, options?: RawAxiosRequestConfig) {
        return MenusApiFp(this.configuration).v1MenusPost(form, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get paginated roles
         * @param {string} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesGet: async (appId: string, page?: number, size?: number, includeResources?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('v1RolesGet', 'appId', appId)
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (includeResources !== undefined) {
                localVarQueryParameter['include_resources'] = includeResources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete role
         * @param {number} id Role ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1RolesIdDelete', 'id', id)
            const localVarPath = `/v1/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * query role
         * @param {number} id Role ID
         * @param {boolean} [includeMenus] whether include menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdGet: async (id: number, includeMenus?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1RolesIdGet', 'id', id)
            const localVarPath = `/v1/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeMenus !== undefined) {
                localVarQueryParameter['include_menus'] = includeMenus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update role
         * @param {number} id Role ID
         * @param {ModelsAddRoleForm} form update role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdPut: async (id: number, form: ModelsAddRoleForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1RolesIdPut', 'id', id)
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1RolesIdPut', 'form', form)
            const localVarPath = `/v1/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add role
         * @param {ModelsAddRoleForm} form create role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesPost: async (form: ModelsAddRoleForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('v1RolesPost', 'form', form)
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * get paginated roles
         * @param {string} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RolesGet(appId: string, page?: number, size?: number, includeResources?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RolesGet(appId, page, size, includeResources, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.v1RolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete role
         * @param {number} id Role ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RolesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RolesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.v1RolesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * query role
         * @param {number} id Role ID
         * @param {boolean} [includeMenus] whether include menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RolesIdGet(id: number, includeMenus?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RolesIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RolesIdGet(id, includeMenus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.v1RolesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update role
         * @param {number} id Role ID
         * @param {ModelsAddRoleForm} form update role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RolesIdPut(id: number, form: ModelsAddRoleForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RolesIdPut(id, form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.v1RolesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * add role
         * @param {ModelsAddRoleForm} form create role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RolesPost(form: ModelsAddRoleForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AppsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RolesPost(form, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.v1RolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * get paginated roles
         * @param {string} appId app ID
         * @param {number} [page] page for quering
         * @param {number} [size] page size for quering
         * @param {boolean} [includeResources] Whether to include resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesGet(appId: string, page?: number, size?: number, includeResources?: boolean, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1RolesGet(appId, page, size, includeResources, options).then((request) => request(axios, basePath));
        },
        /**
         * delete role
         * @param {number} id Role ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdDelete(id: number, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1RolesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * query role
         * @param {number} id Role ID
         * @param {boolean} [includeMenus] whether include menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdGet(id: number, includeMenus?: boolean, options?: any): AxiosPromise<V1RolesIdGet200Response> {
            return localVarFp.v1RolesIdGet(id, includeMenus, options).then((request) => request(axios, basePath));
        },
        /**
         * update role
         * @param {number} id Role ID
         * @param {ModelsAddRoleForm} form update role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesIdPut(id: number, form: ModelsAddRoleForm, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.v1RolesIdPut(id, form, options).then((request) => request(axios, basePath));
        },
        /**
         * add role
         * @param {ModelsAddRoleForm} form create role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RolesPost(form: ModelsAddRoleForm, options?: any): AxiosPromise<V1AppsPost200Response> {
            return localVarFp.v1RolesPost(form, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * get paginated roles
     * @param {string} appId app ID
     * @param {number} [page] page for quering
     * @param {number} [size] page size for quering
     * @param {boolean} [includeResources] Whether to include resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public v1RolesGet(appId: string, page?: number, size?: number, includeResources?: boolean, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).v1RolesGet(appId, page, size, includeResources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete role
     * @param {number} id Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public v1RolesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).v1RolesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * query role
     * @param {number} id Role ID
     * @param {boolean} [includeMenus] whether include menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public v1RolesIdGet(id: number, includeMenus?: boolean, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).v1RolesIdGet(id, includeMenus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update role
     * @param {number} id Role ID
     * @param {ModelsAddRoleForm} form update role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public v1RolesIdPut(id: number, form: ModelsAddRoleForm, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).v1RolesIdPut(id, form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add role
     * @param {ModelsAddRoleForm} form create role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public v1RolesPost(form: ModelsAddRoleForm, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).v1RolesPost(form, options).then((request) => request(this.axios, this.basePath));
    }
}



